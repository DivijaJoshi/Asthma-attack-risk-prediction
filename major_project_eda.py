# -*- coding: utf-8 -*-
"""Major_Project_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NzFcYpVePJ62CFJlUG8cfoYiLtzMS31x

#**EDA Of Data of ALHS_spiro_y1and and data with reduced dataset and balanced classes**
##**Overview**
*The reduced dataset consists of 21 columns of patient history with factors that directly or indirectly contributed to  asthma attacks.*

- diseases            
- medication          
- prev_sleep_dist     
- prev_attack         
- prev_doc_visit     
- prev_health_cond    
- control_asthma      
- sensitivity         
- smoke               
- work                
- cough               
- pefr                
- ext_trig            
- chest_tig           
- medc_usage          
- Humidity            
- AQI                 
- asthma_attack

---

***Loading both the datasets here:***
"""

# Importing required libraries
import pandas as pd
import numpy as np

# Loading the datasets
data1 = pd.read_csv('data with reduced dataset and balanced classes.csv')
data2 = pd.read_excel('ALHS_spiro_y1and2.xlsx')

# Preview the datasets
print("Data 1:")
data1.head()

print("\nData 2:")
data2.head()

"""# Check for missing values

*   Dataset 1 has no missing values
*   Dataset 2 has missing values


"""

# Check for missing values
print("Missing values in Data 1:")
print(data1.isnull().sum())

print("\nMissing values in Data 2:")
print(data2.isnull().sum())

"""##**Statistics of both datasets**
This method calculates and displays summary statistics for each numerical column in the data1 DataFrame. The statistics typically include:

- count: The number of non-null entries.
- mean: The average value.
- std: The standard deviation, which measures the amount of variation or dispersion in the dataset.
- min: The minimum value.
- 25%: The 25th percentile (the first quartile), indicating that 25% of the data falls below this value.
- 50%: The median or 50th percentile, which is the middle value.
- 75%: The 75th percentile (the third quartile), indicating that 75% of the data falls below this value.
- max: The maximum value.
"""

# Basic statistics of both datasets
print("Data 1 statistics:")
print(data1.describe())

print("\nData 2 statistics:")
print(data2.describe())

import seaborn as sns
import matplotlib.pyplot as plt

# Visualize distributions of key features
plt.figure(figsize=(5, 3))
sns.histplot(data1['diseases'], kde=True)  # Replace with actual feature names
plt.title('Distribution of Feature1')
plt.show()

# Similarly for other important features
plt.figure(figsize=(5, 3))
sns.histplot(data2['postfev1'], kde=True)  # Replace with actual feature names
plt.title('Distribution of Spirometry Feature')
plt.show()

"""##Summary:
The code generates a correlation heatmap for the data1 dataset, which visually represents the correlation coefficients between numeric features.
###Purpose:
- To visualize the strength and direction of relationships between features in data1.
- Correlation Coefficients: Values range from -1 (perfect negative correlation) to 1 (perfect positive correlation), with 0 indicating no correlation.
- Annotations: The heatmap displays correlation values in each cell for easy interpretation.
- Color Mapping: Positive correlations are shown in warm colors (e.g., red), while negative correlations are depicted in cool colors (e.g., blue).
"""

# Correlation heatmap for Data 1
plt.figure(figsize=(12, 8))
sns.heatmap(data1.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap for Data 1')
plt.show()

# Filter out non-numeric columns for the correlation heatmap
numeric_data2 = data2.select_dtypes(include=[np.number])  # Select only numeric columns

# Now plot the heatmap for numeric data only
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_data2.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap for Data 2 (Numeric Columns)')
plt.show()

"""##Purpose:To handle missing values (NaNs) in the data1 and data2 DataFrames.
- **Method Used:** The ffill method, or "forward fill," fills missing values with the last valid observation in the dataset.
###How It Works:
When a cell contains a NaN (missing value), it is replaced with the most recent non-NaN value that precedes it in the same column.
###Example:
If you have a column with values [1, NaN, NaN, 4], after applying fillna(method='ffill'), it will become [1, 1, 1, 4].
"""

data1.fillna(method='ffill', inplace=True)
data2.fillna(method='ffill', inplace=True)

"""##Summary:
**Purpose**: To visualize the distribution of numeric features in data1, providing insights into their characteristics and data spread.

**Result:**The output will be a grid of histogram plots, each displaying the distribution of a different numeric column in data1, along with a KDE line that helps visualize the shape of the distribution. This is useful for understanding the central tendency, spread, and potential outliers in the data.

***Kernel Density Estimation (KDE) is a non-parametric way to estimate the probability density function (PDF) of a random variable.***
"""

# Plot distribution for numeric columns in Data 1
numeric_columns1 = data1.select_dtypes(include=[np.number]).columns

# Determine number of rows and columns for subplots
n_cols = 2  # Set to 2 or 3 depending on how you want to arrange the grid
n_rows = (len(numeric_columns1) + n_cols - 1) // n_cols  # This ensures enough rows for all columns

plt.figure(figsize=(15, 5 * n_rows))  # Adjust the figure size based on number of rows
for i, column in enumerate(numeric_columns1, 1):
    plt.subplot(n_rows, n_cols, i)
    sns.histplot(data1[column], kde=True)
    plt.title(f'Distribution of {column}')
plt.tight_layout()
plt.show()

"""###Purpose:
- The x-axis represents the features with significant correlations.
- while the y-axis shows the correlation coefficients.
The plot helps to easily identify which features are positively correlated with asthma attacks and, providing insights for further analysis or model development.
- This ultimately allows you to assess which features in the data1 dataset are most relevant to asthma attacks based on their correlation coefficients.


---


###Result:
###These factors are more likely relevent to asthma attacks from Dataset 1:

- work                0.524211
- cough               0.466528
- chest_tig           0.418074
- medc_usage          0.250877
- prev_attack         0.245643
- smoke               0.236144
- fam_asthma          0.218948
- AQI                 0.218017
"""

# Feature selection based on correlation with asthma attack indicator (Assuming 'asthma_attack' column exists)
correlation_data1 = data1.corr()['asthma_attack'].sort_values(ascending=False)
print(correlation_data1)

# Visualize the strongest correlations
strong_corr_data1 = correlation_data1[correlation_data1 > 0.1]  # Adjust threshold as needed
plt.figure(figsize=(10, 6))
strong_corr_data1.plot(kind='bar', color='skyblue')
plt.title('Strong Correlations with Asthma Attacks (Data 1)')
plt.show()

"""###Result:
###These factors are more likely relevent to asthma attacks from Dataset 2:
- Age
- Pre and post fev and fvc ratios

*The dependency histogram is shown below:*
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your data into data2 DataFrame
# Example: data2 = pd.read_csv("your_data.csv")

# Step 1: Analyze FEV1 and FVC values
print(data2[['postfev1', 'postfvc1']].describe())

# Step 2: Set appropriate thresholds based on the analysis
fev1_threshold = 2.5  # Example threshold for FEV1 in Liters (adjust based on analysis)
fvc_threshold = 2.5    # Example threshold for FVC in Liters (adjust based on analysis)

# Step 3: Create the asthma_attack column
data2['asthma_attack'] = np.where(
    (data2['postfev1'] < fev1_threshold) | (data2['postfvc1'] < fvc_threshold), 1, 0
)

# Check the distribution of the asthma_attack column
print(data2['asthma_attack'].value_counts())

# Step 4: Calculate correlations
numeric_columns = [
    'id', 'round', 'id.round', 'age', 'ht', 'wt',
    'prefvc1', 'prefvc2', 'prefev1', 'prefev2',
    'postfvc1', 'postfvc2', 'postfev1', 'postfev2',
    'prefvcdiff', 'prefevdiff', 'postfvcdiff', 'postfevdiff',
    'prefevQC', 'prefvcQC', 'postfevQC', 'postfvcQC',
    'asthma_attack'
]

data2_numeric = data2[numeric_columns].select_dtypes(include=['float64', 'int64'])

# Calculate correlation with the asthma_attack column
correlation_data = data2_numeric.corr()['asthma_attack'].sort_values(ascending=False)

# Display the correlation values
print(correlation_data)

# Filter for absolute correlation values to highlight strength
absolute_corr_data = correlation_data.abs()  # Take absolute values

# Visualize strong correlations
threshold = 0.1  # Adjust the threshold as needed
strong_absolute_corr_data = absolute_corr_data[absolute_corr_data > threshold]

plt.figure(figsize=(10, 6))
strong_absolute_corr_data.plot(kind='bar', color='skyblue')
plt.title('Strong Correlations with Asthma Attacks (Absolute Values)')
plt.xlabel('Features')
plt.ylabel('Absolute Correlation Coefficient')
plt.axhline(0, color='black', linewidth=0.8, linestyle='--')  # Adding a line at y=0 for clarity
plt.xticks(rotation=45)  # Rotate x labels for better readability
plt.tight_layout()  # Adjust layout to prevent clipping
plt.show()